# Copyright 2017 Cheng Zhao. All rights reserved.
# Use of this source code is governed by the license that can be found in the
# LICENSE file.

declare_args() {
  # Enable 64-bit GC references.
  luajit_enable_gc64 = false
  if (target_cpu == "arm64") {
    luajit_enable_gc64 = true
  }
}

# Translated from lj_arch.h.
luajit_enable_jit = !luajit_enable_gc64
if (luajit_enable_gc64) {
  luajit_defines += [ "LUAJIT_ENABLE_GC64" ]
}

# Translated from src/Makefile, do not change the seqeunce.
luajit_defines = []
dasm_flags = []
if (target_cpu != "mips" && target_cpu != "ppc") {
  dasm_flags += ["-D", "ENDIAN_LE"]
} else {
  assert(false, "Unsupported cpu: " + target_cpu)
}
if (target_cpu == "x64" || target_cpu == "arm64") {
  luajit_defines += ["LUAJIT_TARGET=LUAJIT_ARCH_x64"]
  dasm_flags += ["-D", "P64"]
} else {
  luajit_defines += ["LUAJIT_TARGET=LUAJIT_ARCH_$target_cpu"]
}
if (luajit_enable_jit) {
  dasm_flags += ["-D", "JIT"]
}
if (target_os != "console") {
  dasm_flags += ["-D", "FFI"]
}
if (target_cpu == "arm" || target_cpu == "arm64") {
  dasm_flags += ["-D", "DUALNUM"]
  if (arm_float_abi == "soft" || arm_float_abi == "softfp") {
    luajit_defines += [
      "LJ_ABI_SOFTFP=1",
      "LJ_ARCH_HASFPU=0",
    ]
  } else {
    luajit_defines += [
      "LJ_ABI_SOFTFP=0",
      "LJ_ARCH_HASFPU=1",
    ]
    dasm_flags += ["-D", "FPU"]
    dasm_flags += ["-D", "HFABI"]
  }
}
if (target_os == "ios") {
  dasm_flags += ["-D", "NO_UNWIND"]
}
if (target_cpu == "arm" || target_cpu == "arm64") {
  dasm_flags += ["-D", "VER=${arm_version}0"]
}
if (target_cpu == "x86") {
  dasm_flags += ["-D", "SSE"]
}
if (target_os == "ios") {
  dasm_flags += ["-D", "IOS"]
}

buildvm = "$root_out_dir/buildvm"
ljvm_bout = "$target_gen_dir/lj_vm.S"
ljvm_mode = "elfasm"
if (target_os == "win") {
  ljvm_bout = "$target_gen_dir/lj_vm.o"
  ljvm_mode = "peobj"
} else if (target_os == "mac" || target_os == "ios") {
  ljvm_mode = "machasm"
}
lj_bcdef_h = "$target_gen_dir/lj_bcdef.h"
lj_ffdef_h = "$target_gen_dir/lj_ffdef.h"
lj_libdef_h = "$target_gen_dir/lj_libdef.h"
lj_recdef_h = "$target_gen_dir/lj_recdef.h"
lj_folddef_h = "$target_gen_dir/lj_folddef.h"

# Keep the original order to generate the same bytecode.
ljlib_files = [
  "src/lib_base.c",
  "src/lib_math.c",
  "src/lib_bit.c",
  "src/lib_string.c",
  "src/lib_table.c",
  "src/lib_io.c",
  "src/lib_os.c",
  "src/lib_package.c",
  "src/lib_debug.c",
  "src/lib_jit.c",
  "src/lib_ffi.c",
]

config("luajit_excutable_config") {
  include_dirs = [ "src" ]
  if (target_os == "mac" && target_cpu == "x64") {
    ldflags = [ "-pagezero_size", "10000", "-image_base", "100000000" ]
  }
}

static_library("luajit") {
  defines = luajit_defines
  include_dirs = [ "$target_gen_dir" ]
  sources = ljlib_files + [
    ljvm_bout,
    lj_bcdef_h,
    lj_ffdef_h,
    lj_libdef_h,
    lj_recdef_h,
    lj_folddef_h,
    "src/lauxlib.h",
    "src/lib_aux.c",
    "src/lib_init.c",
    "src/lj_alloc.c",
    "src/lj_alloc.h",
    "src/lj_api.c",
    "src/lj_arch.h",
    "src/lj_asm.c",
    "src/lj_asm.h",
    "src/lj_asm_arm.h",
    "src/lj_asm_mips.h",
    "src/lj_asm_ppc.h",
    "src/lj_asm_x86.h",
    "src/lj_bc.c",
    "src/lj_bc.h",
    "src/lj_bcdump.h",
    "src/lj_bcread.c",
    "src/lj_bcwrite.c",
    "src/lj_buf.c",
    "src/lj_buf.h",
    "src/lj_carith.c",
    "src/lj_carith.h",
    "src/lj_ccall.c",
    "src/lj_ccall.h",
    "src/lj_ccallback.c",
    "src/lj_ccallback.h",
    "src/lj_cconv.c",
    "src/lj_cconv.h",
    "src/lj_cdata.c",
    "src/lj_cdata.h",
    "src/lj_char.c",
    "src/lj_char.h",
    "src/lj_clib.c",
    "src/lj_clib.h",
    "src/lj_cparse.c",
    "src/lj_cparse.h",
    "src/lj_crecord.c",
    "src/lj_crecord.h",
    "src/lj_ctype.c",
    "src/lj_ctype.h",
    "src/lj_debug.c",
    "src/lj_debug.h",
    "src/lj_def.h",
    "src/lj_dispatch.c",
    "src/lj_dispatch.h",
    "src/lj_emit_arm.h",
    "src/lj_emit_mips.h",
    "src/lj_emit_ppc.h",
    "src/lj_emit_x86.h",
    "src/lj_err.c",
    "src/lj_err.h",
    "src/lj_errmsg.h",
    "src/lj_ff.h",
    "src/lj_ffrecord.c",
    "src/lj_ffrecord.h",
    "src/lj_frame.h",
    "src/lj_func.c",
    "src/lj_func.h",
    "src/lj_gc.c",
    "src/lj_gc.h",
    "src/lj_gdbjit.c",
    "src/lj_gdbjit.h",
    "src/lj_ir.c",
    "src/lj_ir.h",
    "src/lj_ircall.h",
    "src/lj_iropt.h",
    "src/lj_jit.h",
    "src/lj_lex.c",
    "src/lj_lex.h",
    "src/lj_lib.c",
    "src/lj_lib.h",
    "src/lj_load.c",
    "src/lj_mcode.c",
    "src/lj_mcode.h",
    "src/lj_meta.c",
    "src/lj_meta.h",
    "src/lj_obj.c",
    "src/lj_obj.h",
    "src/lj_opt_dce.c",
    "src/lj_opt_fold.c",
    "src/lj_opt_loop.c",
    "src/lj_opt_mem.c",
    "src/lj_opt_narrow.c",
    "src/lj_opt_sink.c",
    "src/lj_opt_split.c",
    "src/lj_parse.c",
    "src/lj_parse.h",
    "src/lj_profile.c",
    "src/lj_profile.h",
    "src/lj_record.c",
    "src/lj_record.h",
    "src/lj_snap.c",
    "src/lj_snap.h",
    "src/lj_state.c",
    "src/lj_state.h",
    "src/lj_str.c",
    "src/lj_str.h",
    "src/lj_strfmt.c",
    "src/lj_strfmt.h",
    "src/lj_strfmt_num.c",
    "src/lj_strscan.c",
    "src/lj_strscan.h",
    "src/lj_tab.c",
    "src/lj_tab.h",
    "src/lj_target.h",
    "src/lj_target_arm.h",
    "src/lj_target_arm64.h",
    "src/lj_target_mips.h",
    "src/lj_target_ppc.h",
    "src/lj_target_x86.h",
    "src/lj_trace.c",
    "src/lj_trace.h",
    "src/lj_traceerr.h",
    "src/lj_udata.c",
    "src/lj_udata.h",
    "src/lj_vm.h",
    "src/lj_vmevent.c",
    "src/lj_vmevent.h",
    "src/lj_vmmath.c",
    "src/lua.h",
    "src/lua.hpp",
    "src/luaconf.h",
    "src/luajit.h",
    "src/lualib.h",
  ]
  cflags = [ "-Wno-varargs" ]

  public_configs = [ ":luajit_excutable_config" ]
  if (!is_win) {
    configs -= [ "//build/config/gcc:symbol_visibility_hidden" ]
  }

  deps = [
    ":generate_ljvm_s",
    ":generate_lj_bcdef_h",
    ":generate_lj_ffdef_h",
    ":generate_lj_libdef_h",
    ":generate_lj_recdef_h",
    ":generate_lj_folddef_h",
    ":generate_vmdef_lua",
  ]
}

executable("luajit_interpreter") {
  defines = luajit_defines
  sources = [ "src/luajit.c" ]
  configs -= [ "//build/config/compiler:default_optimization" ]
  deps = [ ":luajit" ]
}

executable("minilua") {
  defines = luajit_defines
  sources = [
    "src/host/minilua.c",
  ]
}

action("generate_buildvm_arch_h") {
  if (target_cpu == "x64" && !luajit_enable_gc64) {
    dasm_arch = "x86"
  } else {
    dasm_arch = target_cpu
  }

  hostlua = "$root_out_dir/minilua"
  dasm_lua = "dynasm/dynasm.lua"
  dasm_asc = "src/vm_$dasm_arch.dasc"
  buildvm_arch_h = "$target_gen_dir/buildvm_arch.h"

  script = "//build/run.py"
  inputs = [ hostlua, dasm_lua ]
  outputs = [ buildvm_arch_h ]
  args = [ rebase_path(hostlua), rebase_path(dasm_lua) ] + dasm_flags +
         ["-o", rebase_path(buildvm_arch_h), rebase_path(dasm_asc) ]

  deps = [ ":minilua($host_toolchain)" ]
}

executable("buildvm") {
  defines = luajit_defines
  include_dirs = [
    "src",
    "$target_gen_dir",
  ]
  sources = [
    "src/host/buildvm.c",
    "src/host/buildvm.h",
    "src/host/buildvm_asm.c",
    "src/host/buildvm_peobj.c",
    "src/host/buildvm_libbc.h",
    "src/host/buildvm_lib.c",
    "src/host/buildvm_fold.c",
  ]
  cflags = [ "-Wno-shift-overflow" ]

  deps = [ ":generate_buildvm_arch_h" ]
}

action("generate_ljvm_s") {
  script = "//build/run.py"
  inputs = [ buildvm ]
  outputs = [ ljvm_bout ]
  args = [ rebase_path(buildvm), "-m", ljvm_mode, "-o", rebase_path(ljvm_bout) ]

  deps = [ ":buildvm($host_toolchain)" ]
}

action("generate_lj_bcdef_h") {
  script = "//build/run.py"
  inputs = [ buildvm ] + ljlib_files
  outputs = [ lj_bcdef_h ]
  args = [ rebase_path(buildvm), "-m", "bcdef", "-o",
           rebase_path(lj_bcdef_h) ] + rebase_path(ljlib_files)

  deps = [ ":buildvm($host_toolchain)" ]
}

action("generate_lj_ffdef_h") {
  script = "//build/run.py"
  inputs = [ buildvm ] + ljlib_files
  outputs = [ lj_ffdef_h ]
  args = [ rebase_path(buildvm), "-m", "ffdef", "-o",
           rebase_path(lj_ffdef_h) ] + rebase_path(ljlib_files)

  deps = [ ":buildvm($host_toolchain)" ]
}

action("generate_lj_libdef_h") {
  script = "//build/run.py"
  inputs = [ buildvm ] + ljlib_files
  outputs = [ lj_libdef_h ]
  args = [ rebase_path(buildvm), "-m", "libdef", "-o",
           rebase_path(lj_libdef_h) ] + rebase_path(ljlib_files)

  deps = [ ":buildvm($host_toolchain)" ]
}

action("generate_lj_recdef_h") {
  script = "//build/run.py"
  inputs = [ buildvm ] + ljlib_files
  outputs = [ lj_recdef_h ]
  args = [ rebase_path(buildvm), "-m", "recdef", "-o",
           rebase_path(lj_recdef_h) ] + rebase_path(ljlib_files)

  deps = [ ":buildvm($host_toolchain)" ]
}

action("generate_lj_folddef_h") {
  script = "//build/run.py"
  inputs = [
    buildvm,
    "src/lj_opt_fold.c",
  ]
  outputs = [ lj_folddef_h ]
  args = [ rebase_path(buildvm), "-m", "folddef", "-o",
           rebase_path(lj_folddef_h), rebase_path("src/lj_opt_fold.c") ]

  deps = [ ":buildvm($host_toolchain)" ]
}

action("generate_vmdef_lua") {
  script = "//build/run.py"
  inputs = [ buildvm ] + ljlib_files
  outputs = [ "$root_out_dir/vmdef.lua" ]
  args = [ rebase_path(buildvm), "-m", "vmdef", "-o",
           rebase_path("$root_out_dir/vmdef.lua") ] + rebase_path(ljlib_files)

  deps = [ ":buildvm($host_toolchain)" ]
}
