name: App
component: gui
header: nativeui/app.h
type: class
namespace: nu
description: Application class.

detail: |
  This class represents current app and provides app wide APIs.

lang_detail:
  cpp: |
    This class can not be created by user, you must create `State` first and
    then receive an instance of `App` via `App::GetCurrent`.

    ```cpp
    nu::State state;
    nu::App* app = nu::App::GetCurrent();
    ```

  lua: |
    This class can not be created by user, you can only receive its global
    instance from the `app` property of the module:

    ```lua
    gui.app:getapplicationmenu()
    ```

  js: |
    This class can not be created by user, you can only receive its global
    instance from the `app` property of the module:

    ```js
    gui.app.getApplicationMenu()
    ```

class_methods:
  - signature: App* GetCurrent()
    lang: ['cpp']
    description: Return current app.

methods:
  - signature: void SetApplicationMenu(scoped_refptr<MenuBar> menu)
    platform: ['macOS']
    description: Set the application menu bar.

  - signature: MenuBar* GetApplicationMenu() const
    platform: ['macOS']
    description: Return the application menu bar.

  - signature: void SetDockBadgeLabel(const std::string& label)
    platform: ['macOS']
    description: Set the `label` to be displayed in dock’s badging area.

  - signature: std::string GetDockBadgeLabel() const
    platform: ['macOS']
    description: Get the label displayed in dock’s badging area.

  - signature: void Activate(bool force)
    platform: ['macOS']
    description: Make current app the active app.
    detail: |
      The `force` parameter is normally set to false. When the Finder launches
      an app, using a value of false for `force` allows the app to become active
      if the user waits for it to launch, but the app remains unobtrusive if the
      user activates another app. Regardless of the setting of flag, there may
      be a time lag before the app activates—you should not assume the app will
      be active immediately after sending this message.

  - signature: void Deactivate()
    platform: ['macOS']
    description: Deactivate current app.

  - signature: bool IsActive()
    platform: ['macOS']
    description: Return whether current app is the active app.

  - signature: void SetActivationPolicy(App::ActivationPolicy policy)
    platform: ['macOS']
    description: Modify the app's activation policy.

  - signature: App::ActivationPolicy GetActivationPolicy() const
    platform: ['macOS']
    description: Return app's activation policy.
