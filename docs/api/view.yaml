name: View
component: gui
header: nativeui/view.h
type: refcounted
namespace: nu
description: Base class for GUI components.

detail: |
  `View` provides methods to receive and change various style properties.

lang_detail:
  cpp: |
    `View` is a `RefCounted` type. Sub-classes of `View` can only be created on
    heap, and must be managed with `scoped_refptr`.
    Every API that accpets `View*` will store a reference to the pointer, so it
    is safe to pass a newly created raw pointer to public APIs.

    ```cpp
    scoped_refptr<nu::Container> container = new nu::Container;
    container->AddChildView(new nu::Label("child"));
    ```

class_properties:
  - property: const char* kClassName
    lang: ['cpp']
    description: The class name of this view.

methods:
  - signature: const char* GetClassName() const
    lang: ['cpp']
    description: Return the class name.
    detail: |
      The returned value is guarenteed to be the `kClassName` property of each
      view.

  - signature: Vector2dF OffsetFromView(const View* view) const
    description: Return offset from `view`.

  - signature: Vector2dF OffsetFromWindow() const
    description: Return offset from the window that owns the view.

  - signature: RectF GetBounds() const
    description: Return the position and size of the view, relative to its parent.

  - signature: void Layout()
    description: Make the view re-recalculate its layout.

  - signature: void SchedulePaint()
    description: Schedule to repaint the whole view.

  - signature: void SchedulePaintRect(const RectF& rect)
    description: Schedule to repaint the `rect` area in view.

  - signature: void SetVisible(bool visible)
    description: Show/Hide the view.

  - signature: bool IsVisible() const
    description: Return whether the view is visible.

  - signature: void SetEnabled(bool enable)
    description: Set whether the view is enabled.
    detail: |
      The enabled state of each view is not affected by its parent, disabling
      a container-like view does not have any effect.

  - signature: bool IsEnabled() const
    description: Return whether the view is enabled.

  - signature: void Focus()
    description: Move the keyboard focus to the view.

  - signature: bool HasFocus() const
    description: Return whether the view has keyboard focus.

  - signature: void SetFocusable(bool focusable)
    description: Set whether the view can be focused on.

  - signature: bool IsFocusable() const
    description: Return whether the view can be focused on.

  - signature: void SetCapture()
    description: Set mouse capture to the view.

  - signature: void ReleaseCapture()
    description: Release mouse capture if the view has mouse capture.

  - signature: bool HasCapture() const
    description: Return whether the view has mouse capture.

  - signature: void SetMouseDownCanMoveWindow(bool can)
    description: Set whether dragging mouse would move the window.
    detail: |
      For most platforms this method only works for frameless windows, having
      this feature may also prevent mouse events to happen.

      On macOS the `Container` view has this feature turned on by default. To
      turn this feature on for the view, the view's parent view must also has
      this feature turned on.

      On Windows the view with this feature will be treated as titlebar, e.g.
      double-clicking would maximize the window, right-clicking may show the
      system menu.

  - signature: bool IsMouseDownCanMoveWindow() const
    description: Return whether dragging the view would move the window.

  - signature: void SetCursor(Cursor* cursor)
    description: Set the cursor to show when hovering the view.
    detail: |
      On Linux, setting cursor would force the view to own its own GDK window.
      For certain views like `Label`, this may have remove the view's background
      color.

  - signature: void SetFont(Font* font)
    description: Change the font used for drawing text in the view.
    detail: |
      This methods only works for `View`s that display text, like `Label` or
      `Entry`.

  - signature: void SetColor(Color color)
    description: Change the color used for drawing text in the view.
    detail: |
      This methods only works for `View`s that display text, like `Label` or
      `Entry`.

  - signature: void SetBackgroundColor(Color color)
    description: Change the background color of the view.

  - signature: void SetStyle(Args... styles)
    lang: ['cpp']
    parameters:
      styles:
        description: |
          Variadic parameters that are pairs of keys and values.
    description: Change the styles of the view.
    detail: |
      Available style properties can be found at
      [Layout System](../guides/layout_system.html).

      ```cpp
      view->SetStyle("flex", 1, "flex-direction", "row");
      ```

  - signature: void SetStyle(Dictionary styles)
    lang: ['lua', 'js']
    parameters:
      styles:
        description: |
          A key-value dictionary that defines the name and value of the style
          properties, key must be string, and value must be either string or
          number.
    description: Change the styles of the view.
    detail: |
      Available style properties can be found at
      [Layout System](../guides/layout_system.html).

  - signature: SizeF GetMinimumSize() const
    description: Return the minimum size needed to show the view.

  - signature: View* GetParent() const
    description: Return parent view.

  - signature: Window* GetWindow() const
    description: Return the window that the view belongs to.

  - signature: NativeView GetNative() const
    lang: ['cpp']
    description: Return the native type wrapped by the view.

events:
  - callback: bool on_mouse_down(View* self, const MouseEvent& event)
    description: Emitted when pressing mouse buttons.

  - callback: bool on_mouse_up(View* self, const MouseEvent& event)
    description: Emitted when releasing mouse buttons.

  - callback: void on_mouse_move(View* self, const MouseEvent& event)
    description: Emitted when user moves mouse in the view.

  - callback: void on_mouse_enter(View* self, const MouseEvent& event)
    description: Emitted when mouse enters the view.

  - callback: void on_mouse_leave(View* self, const MouseEvent& event)
    description: Emitted when mouse leaves the view.

  - callback: bool on_key_down(View* self, const KeyEvent& event)
    description: Emitted when pressing keyboard.

  - callback: bool on_key_up(View* self, const KeyEvent& event)
    description: Emitted when releasing keyboard.

  - callback: void on_size_changed(View* self)
    description: Emitted when the view's size has been changed.

  - callback: void on_capture_lost(View* self)
    description: Emitted when the mouse capture on view has been released.
